<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="ProjectMaintain">

	<typeAlias alias="projectMaintainForm" type="com.projectmaintain.ProjectMaintainForm"/>
	<typeAlias alias="projectMaintainVO" type="com.projectmaintain.ProjectMaintainVO"/>
	<typeAlias alias="preProjectVO" type="com.projectmaintain.PreProjectVO"/>
	<typeAlias alias="programMaintainForm" type="com.projectmaintain.ProgramMaintainForm"/>
	<typeAlias alias="programMaintainVO" type="com.projectmaintain.ProgramMaintainVO"/>
	<typeAlias alias="projectDistributeForm" type="com.projectmaintain.ProjectDistributeForm"/>
	<typeAlias alias="projectDistributeVO" type="com.projectmaintain.ProjectDistributeVO"/>
	<typeAlias alias="changeRecordForm" type="com.projectmaintain.ChangeRecordForm"/>
	<typeAlias alias="changeRecordVO" type="com.projectmaintain.ChangeRecordVO"/>
	<typeAlias alias="taskListVO" type="com.work.TASK_LISTVO"/>
	<typeAlias alias="reportProjectDataListForm" type="com.projectmaintain.ReportProjectDataListForm"/>
	<typeAlias alias="blankWorkVO" type="com.projectmaintain.BlankWorkVO"/>
	<typeAlias alias="issueRecordVO" type="com.projectmaintain.IssueRecordVO"/>
	<typeAlias alias="requireChangeVO" type="com.projectmaintain.RequireChangeVO"/>
	
	<resultMap id="requireChangeMap" class="requireChangeVO">
		<result property="projectId" column="PROJECT_ID" />
		<result property="version" column="VERSION" />
		<result property="content" column="CONTENT" />
		<result property="reason" column="REASON" />
		<result property="userId" column="USER_ID"/>
		<result property="changeDate" column="CHANGE_DATE"/>
	</resultMap>
	
	<resultMap id="issueRecordMap" class="issueRecordVO">
		<result property="id" column="ID"/>
		<result property="projectId" column="PROJECT_ID" />
		<result property="status" column="STAT" />
		<result property="userId" column="USER_ID"/>
		<result property="memo" column="MEMO"/>
		<result property="checkUser" column="CHECK_USER"/>
	</resultMap>
	
	<resultMap id="programMaintainMap" class="com.projectmaintain.ProgramMaintainVO">
		<result property="projectId" column="PROJECT_ID" />
		<result property="program" column="PROGRAM" />
	</resultMap>
	<resultMap id="projectMaintainMap" class="com.projectmaintain.ProjectMaintainVO">
		<result property="projectId" column="PROJECT_ID" />
		<result property="projectName" column="PROJECT_NAME" />
		<result property="status" column="STAT" />
		<result property="userId" column="USER_ID"/>
		<result property="memo" column="MEMO"/>
		<result property="issId" column="ISS_ID"/>
		<result property="isInContract" column="IS_IN_CONTRACT"/>
		<result property="needDev" column="NEED_DEV"/>
		<result property="owning" column="OWNING"/>		
		<result property="projectClass" column="PROJECT_CLASS"/>
	</resultMap>
	<resultMap id="projectMaintainMap1" class="com.projectmaintain.ProjectMaintainVO">
		<result property="projectId" column="PROJECT_ID" />
		<result property="projectName" column="PROJECT_NAME" />
		<result property="startDate" column="START_DATE" />
		<result property="endDate" column="END_DATE" />
		<result property="status" column="STAT" />
		<result property="userId" column="USER_ID"/>
		<result property="memo" column="MEMO"/>
		<result property="issId" column="ISS_ID"/>
		<result property="isInContract" column="IS_IN_CONTRACT"/>
		<result property="needDev" column="NEED_DEV"/>
		<result property="owning" column="OWNING"/>
		<result property="projectClass" column="PROJECT_CLASS"/>
	</resultMap>
	<resultMap id="projectMaintainMap2" class="com.projectmaintain.ProjectMaintainVO">
		<result property="projectId" column="PROJECT_ID" />
		<result property="projectName" column="PROJECT_NAME" />
		<result property="status" column="STAT" />
		<result property="userId" column="USER_ID"/>
		<result property="memo" column="MEMO"/>
		<result property="issId" column="ISS_ID"/>
		<result property="isInContract" column="IS_IN_CONTRACT"/>
		<result property="needDev" column="NEED_DEV"/>
		<result property="owning" column="OWNING"/>	
		<result property="endDate" column="END_DATE"/>
		<result property="projectClass" column="PROJECT_CLASS"/>	
	</resultMap>
	<resultMap id="projectDistributeMap" class="com.projectmaintain.ProjectDistributeVO">
		<result property="id" column="ID" />	
		<result property="projectId" column="PROJECT_ID" />		
		<result property="startDate" column="START_DATE" />
		<result property="endDate" column="END_DATE" />
		<result property="status" column="STAT" />
		<result property="userId" column="USER_ID"/>
		<result property="memo" column="MEMO"/>
		<result property="isDone" column="IS_DONE"/>
	</resultMap>	
	<resultMap id="projectDistributeMap2" class="com.projectmaintain.ProjectDistributeVO">
		<result property="id" column="ID" />	
		<result property="projectId" column="PROJECT_ID" />		
		<result property="startDate" column="START_DATE" />
		<result property="endDate" column="END_DATE" />
		<result property="status" column="STAT" />
		<result property="userId" column="USER_ID"/>
		<result property="memo" column="MEMO"/>
		<result property="isDone" column="IS_DONE"/>
		<result property="score" column="SCORE"/>
	</resultMap>	
	<resultMap id="changeRecordMap" class="com.projectmaintain.ChangeRecordVO">
		<result property="projectId" column="PROJECT_ID" />		
		<result property="changeDate" column="CHANGE_DATE" />		
		<result property="content" column="CONTENT" />
		<result property="userId" column="USER_ID"/>
		<result property="reason" column="REASON"/>
	</resultMap>
	<!-- zhengpy  20090212 begin-->
	<resultMap id="reportProjectDataListMap" class="com.projectmaintain.ReportProjectDataListVO">
		<result column="PROJECT_ID"   property="projectId" />
		<result column="ISS_ID"       property="issId"/>
		<result column="PROJECT_NAME" property="projectName" />
		<result column="START_DATE"   property="startDate" />
		<result column="STAT"       property="status" />
		<result column="DESIGN_BRD"   property="designBRD" />
		<result column="DESIGN_FTS"   property="designFTS" />
		<result column="DESIGN_DEV"   property="designDEV" />
		<result column="DESIGN_SIT"   property="designSIT" />
		<result column="DESIGN_UAT"   property="designUAT" />
		<result column="FINAL_BRD"    property="finalBRD" />
		<result column="FINAL_FTS"    property="finalFTS" />
		<result column="FINAL_DEV"    property="finalDEV" />
		<result column="FINAL_SIT"    property="finalSIT" />
		<result column="FINAL_UAT"    property="finalUAT" />
		<result column="DESIGN_DAY"   property="designDay" />
		<result column="FINAL_DAY"    property="finalDay" />
		<result column="ERROR_RATE"   property="errorRate" />
	</resultMap>
	<!-- zhengpy  20090212 end-->
	

	
	
	
	<select id="getProject" resultMap="projectMaintainMap1" parameterClass="projectMaintainForm" >
		<![CDATA[
			select a.*,
			IFNull(b.START_DATE,'') as START_DATE,
			IFNull(b.END_DATE,'') as END_DATE
			from project_list a 
			left join (select PROJECT_ID ,
						min(START_DATE) as START_DATE,
						max(END_DATE) as END_DATE 
						from project_distribute
						where PROJECT_ID=#projectId#
						group by PROJECT_ID) as b 
			on a.PROJECT_ID=b.PROJECT_ID
			where a.PROJECT_ID=#projectId# 
	    ]]>
	</select>
	<select id="getProjectUseVO" resultMap="projectMaintainMap" parameterClass="projectMaintainVO" >
		<![CDATA[
			select * from project_list
			where PROJECT_ID=#projectId# 
	    ]]>
	</select>
	<select id="getActiveProject" resultMap="projectMaintainMap2" parameterClass="projectMaintainForm">
		select a.*,b.END_DATE from project_list a left join
		(select max(END_DATE) as END_DATE,PROJECT_ID 
			from project_distribute  group by PROJECT_ID
		<dynamic prepend="">
			<isNotEmpty prepend=" " property="endDate_f">
				<![CDATA[
					 having max(END_DATE)<= (select date_format(date_add(#endDate_f#,interval conv(#day#,10,10) day),'%Y%m%d'))						
				]]>
			</isNotEmpty>
		</dynamic>
		) b on a.PROJECT_ID = b.PROJECT_ID where a.STAT not in ('9','5')
		
		<dynamic prepend="">
			<isNotEmpty prepend="and" property="projectId_f">
				 a.PROJECT_ID like CONCAT(#projectId_f#,'%') 
			</isNotEmpty>
			<isNotEmpty prepend="and" property="status_f">
				 a.STAT = #status_f# 
			</isNotEmpty>
		</dynamic>
		order by a.STAT,a.PROJECT_ID
	</select>
	<select id="getProjectList" resultMap="projectMaintainMap" parameterClass="projectMaintainForm" >
		select * from project_list where 1=1
		<dynamic prepend="">
			<isNotEmpty prepend="and" property="projectId_f">
				 PROJECT_ID like CONCAT(#projectId_f#,'%') 
			</isNotEmpty>
			<isNotEmpty prepend="and" property="status_f">
				 STAT = #status_f# 
			</isNotEmpty>
		</dynamic>
		order by PROJECT_ID
	</select> 

	<select id="getSelectedProjects" resultClass="string" parameterClass="projectMaintainForm">
		select PRE_PROJECT from project_relation where PROJECT_ID=#projectId#
	</select>
	<select id="getProjectRelation" resultClass="preProjectVO" parameterClass="projectMaintainForm">
		select PROJECT_ID as projectId,PRE_PROJECT as preProject from project_relation
	</select>
	<select id="getNotSelectedProjects" resultClass="string" parameterClass="projectMaintainForm">
		select PROJECT_ID from project_list 
		where PROJECT_ID not in(select PRE_PROJECT from project_relation where PROJECT_ID=#projectId#)
		and PROJECT_ID not in ('9','5',#projectId#)
	</select>
	<insert id="insertProject" parameterClass="projectMaintainVO">
		insert into project_list (PROJECT_ID,STAT,USER_ID,PROJECT_NAME,MEMO,ISS_ID,IS_IN_CONTRACT,NEED_DEV,OWNING,PROJECT_CLASS)
		values(#projectId#,#status#,#userId#,#projectName#,#memo#,#issId#,#isInContract#,#needDev#,#owning#,#projectClass#)
	</insert>
	<update id="updateProject" parameterClass="projectMaintainVO">
		update project_list 
		set	STAT=#status#,
		PROJECT_NAME=#projectName#,
		MEMO=#memo#,
		ISS_ID=#issId#,
		IS_IN_CONTRACT=#isInContract#,
		NEED_DEV=#needDev#,
		OWNING=#owning#,
		PROJECT_CLASS=#projectClass#
		where PROJECT_ID=#projectId#
	</update>
	<update id="removeProject" parameterClass="projectMaintainVO">
		update project_list set STAT='9',USER_ID=#userId# where PROJECT_ID=#projectId#
	</update>
	<delete id="deleteProject" parameterClass="projectMaintainVO">
		delete from project_list where PROJECT_ID=#projectId#
	</delete>
	<delete id="deleteProjectRelation" parameterClass="preProjectVO">
		delete from project_relation where PROJECT_ID=#projectId#
	</delete>
	<insert id="insertProjectRelation" parameterClass="preProjectVO">
		insert into project_relation values(#projectId#,#preProject#)
	</insert>
	
	<select id="getProgramList" resultMap="programMaintainMap" parameterClass="programMaintainForm" >
		<![CDATA[
			select * from program_list where PROJECT_ID=#projectId#
			order by PROGRAM
	    ]]>
	</select>
	<insert id="insertProgram" parameterClass="programMaintainVO">
		insert into program_list values(#projectId#,#program#)
	</insert>
	<delete id="deleteProgram" parameterClass="programMaintainVO">
		delete from program_list where PROJECT_ID=#projectId#
	</delete>
	<select id="getConflictProjects" resultClass="com.projectmaintain.ConflictProjectVO" parameterClass="projectMaintainForm">
		select 
			a.PROJECT_ID as projectId,
			a.PROGRAM as program,
			b.PROJECT_ID as preProject,
			c.STAT as status,
			c.PROJECT_NAME as projectName
		from program_list a,program_list b,project_list c
		where a.PROJECT_ID=#projectId# 
		and a.PROJECT_ID != b.PROJECT_ID
		and a.PROGRAM = b.PROGRAM		
		and b.PROJECT_ID = c.PROJECT_ID
		and c.STAT not in ('9','5')	
		order by a.PROJECT_ID,b.PROJECT_ID	
	</select>
	<select id="getPreProjectStatus" resultMap="projectMaintainMap" parameterClass="java.util.List">
		select * from project_list where PROJECT_ID in 
		<iterate conjunction="," open="(" close=")">
			#value[]#
		</iterate> 
	</select>

	<select id="getSelectedStuff" resultClass="projectDistributeVO" parameterClass="string">
		select 
			a.USER_ID as userId,
			b.USER_NAME as userName
		from project_distribute a,ep_user b
		where a.PROJECT_ID=#value#
		and a.USER_ID=b.USER_ID
	</select>
	<select id="getNotSelectedStuff" resultClass="projectDistributeVO" parameterClass="projectDistributeForm">
		select 
			USER_ID as userId,
			USER_NAME as userName 
		from ep_user 
		where exists(
			select * from ep_user_role a,ep_role b
			where a.ROLE_ID=b.ROLE_ID
			and b.ROLE_NAME='员工'
			and a.USER_ID=ep_user.USER_ID)			
		and STAT ='1'
		order by USER_NAME
	</select>
	<select id="getStuff" resultClass="string">
		select 
			USER_ID
		from ep_user 
		where exists(
			select * from ep_user_role a,ep_role b
			where a.ROLE_ID=b.ROLE_ID
			and b.ROLE_NAME='员工'
			and a.USER_ID=ep_user.USER_ID)
		and STAT='1'
		order by USER_NAME
	</select>
	
	<select id="getMonthlyDistribute" resultMap="projectDistributeMap" parameterClass="string">
		<![CDATA[
			select * from project_distribute
			where END_DATE >= substring(#value#,1,6)+'01'
		]]>
	</select>
	<select id="getConflictDistribute" resultMap="projectDistributeMap" parameterClass="projectDistributeVO">
		<![CDATA[
			select * from project_distribute
			where (( END_DATE between #startDate# and #endDate#)
			or (START_DATE between #startDate# and #endDate#)
			or (START_DATE <= #startDate# and END_DATE >=#endDate#))
			and not (ID=#id#)
			and USER_ID=#userId#
		]]>
	</select>
	<select id="getProjectDistribute" resultClass="projectDistributeVO" parameterClass="string">
		select 
			a.ID as id,
			a.PROJECT_ID as projectId,
			c.USER_NAME as userName,
			a.STAT as status,
			a.USER_ID as userid,
			a.START_DATE as startDate,
			a.END_DATE as endDate,
			a.MEMO as memo
		from project_distribute a,ep_user c
		where a.PROJECT_ID=#value#					
			and a.USER_ID=c.USER_ID
		order by a.STAT
	</select>
	<delete id="deleteProjectDistribute" parameterClass="projectDistributeVO">
		delete from project_distribute where PROJECT_ID=#projectId#
	</delete>
	<insert id="insertProjectDistribute" parameterClass="projectDistributeVO">
		insert into project_distribute (PROJECT_ID,USER_ID,START_DATE,END_DATE,MEMO,IS_DONE,STAT) 
		values(#projectId#,#userId#,#startDate#,#endDate#,#memo#,#isDone#,#status#)
	</insert>
	<update id="updateProjectDistribute" parameterClass="projectDistributeVO">
		update project_distribute 
		set START_DATE=#startDate#,END_DATE=#endDate#,MEMO=#memo#,IS_DONE=#isDone#
		where ID=#id#		
	</update>
	<delete id="removeProjectDistribute" parameterClass="projectDistributeForm">
		delete from project_distribute
		where ID=#id#
	</delete>
	<select id="getProjectDistributeList" resultMap="projectDistributeMap2" parameterClass="string">
		select a.*,IFNull(b.SCORE,0) as SCORE 
		from project_distribute a left join
			(select b.PROJECT_ID,b.STAT,b.USER_ID,sum(SCORE*MODULUS) as SCORE
		        from check_items a,score_info b
		        where a.CHECK_NO = b.CHECK_NO and b.PROJECT_ID=#value#
		        group by b.PROJECT_ID,b.STAT,b.USER_ID) b 
		on  a.STAT = b.STAT and 
		a.PROJECT_ID=b.PROJECT_ID and a.USER_ID = b.USER_ID	
		where a.PROJECT_ID=#value#
		order by a.STAT
	</select>
	<select id="getProjectDistributeDetail" resultMap="projectDistributeMap" parameterClass="projectDistributeForm">
		select * from project_distribute
		where ID=#id#
	</select>
	<select id="queryForProjectDistribute" resultMap="projectDistributeMap" parameterClass="projectDistributeVO">
		select * from project_distribute
		where ID=#id#
	</select>
	<select id="getMyInputProjects" resultMap="projectMaintainMap" parameterClass="projectMaintainForm">
		select *
		from project_list
		where USER_ID=#userId#
		and STAT not in ('5','9')
		<dynamic prepend="">
			<isNotEmpty prepend="and" property="projectId_f">
				 PROJECT_ID like CONCAT(#projectId_f#,'%')  
			</isNotEmpty>
			<isNotEmpty prepend="and" property="status_f">
				 STAT = #status_f# 
			</isNotEmpty>
		</dynamic>
		order by PROJECT_ID
	</select>
	<select id="getMyProjects" resultClass="projectDistributeVO" parameterClass="string">
		select 
			a.ID as id,
			a.PROJECT_ID as projectId,			
			a.STAT as status,
			a.START_DATE as startDate,
			a.END_DATE as endDate,
			a.MEMO as memo,
			(case when a.STAT=b.STAT then '1' else '0' end ) as ready
		from project_distribute a,project_list b
		where a.PROJECT_ID=b.PROJECT_ID
		and a.USER_ID=#value#	
		and b.STAT not in('5','9')	
		and a.IS_DONE='0'
		and a.STAT>=b.STAT	
	</select>
	
	<select id="getDoneProjectDistributes" resultMap="projectDistributeMap" parameterClass="string">
		<![CDATA[
			select a.*
			from project_distribute a,project_list c
	        where a.USER_ID=#value#
	        and a.PROJECT_ID = c.PROJECT_ID
	        and c.STAT not in ('5','9')
	        and a.STAT = c.STAT
	        and not exists(
	            select * from project_distribute b
	            where b.PROJECT_ID = a.PROJECT_ID
	            and a.USER_ID != b.USER_ID
	            and a.STAT = b.STAT
	            and b.IS_DONE='0')
        ]]>
	</select>
	
	<update id="finishMyProject" parameterClass="projectDistributeVO">
		update project_distribute set IS_DONE='1'
		where ID=#id#
	</update>
	<select id="getChangeRecord" resultMap="changeRecordMap" parameterClass="string">
		select *
		from change_record
		where PROJECT_ID=#value#
		order by CHANGE_DATE
	</select>
	
	<insert id="insertChangeRecord" parameterClass="changeRecordVO">
		insert into change_record (PROJECT_ID,CHANGE_DATE,CONTENT,USER_ID,REASON)
		values(#projectId#,#changeDate#,#content#,#userId#,#reason#)
	</insert>
	
	<select id="getTodayWork" resultClass="taskListVO" parameterClass="projectDistributeForm">
		select PROJECT_NO as project_no
		from TASK_LIST
		where PROJECT_NO=#projectId#
		and TASK_STEP=#status#
		and TASK_DATE=#endDate#
		and TASK_USER=#userId#
		and ID=#id#
	</select>
	
	<!-- zhengpy  20090212 -->
	<select id="getReportList" resultMap="reportProjectDataListMap" parameterClass="reportProjectDataListForm">
		select a.PROJECT_ID,a.ISS_ID,a.PROJECT_NAME,min(a.START_DATE) as START_DATE,a.STAT,
		max(BRD) as DESIGN_BRD,max(FTS) as DESIGN_FTS,max(DEV) as DESIGN_DEV,max(SIT) as DESIGN_SIT,max(UAT) as DESIGN_UAT,
		max(BRD1) as FINAL_BRD,max(FTS1) as FINAL_FTS,max(DEV1) as FINAL_DEV,max(SIT1) as FINAL_SIT,max(UAT1) as FINAL_UAT,
		sum(DESIGN_DAY) as DESIGN_DAY,sum(FINAL_DAY) as FINAL_DAY,
		(sum(FINAL_DAY)-sum(DESIGN_DAY))/sum(FINAL_DAY) as ERROR_RATE
		from (
		select a.PROJECT_ID,a.ISS_ID,a.PROJECT_NAME,b.START_DATE,a.STAT,b.STAT,
		case when b.STAT = '0' then b.END_DATE else '' end BRD,
		case when b.STAT = '1' then b.END_DATE else '' end FTS,
		case when b.STAT = '2' then b.END_DATE else '' end DEV,
		case when b.STAT = '3' then b.END_DATE else '' end SIT,
		case when b.STAT = '4' then b.END_DATE else '' end UAT,
		case when b.STAT = '0' then b.FINAL_END_DATE else '' end BRD1,
		case when b.STAT = '1' then b.FINAL_END_DATE else '' end FTS1,
		case when b.STAT = '2' then b.FINAL_END_DATE else '' end DEV1,
		case when b.STAT = '3' then b.FINAL_END_DATE else '' end SIT1,
		case when b.STAT = '4' then b.FINAL_END_DATE else '' end UAT1,
		datediff(dd,convert(date,b.START_DATE),convert(date,b.END_DATE))+1 DESIGN_DAY,
		datediff(dd,convert(date,b.START_DATE),convert(date,b.FINAL_END_DATE))+1 FINAL_DAY
		from project_list a
		left join project_distribute b on a.PROJECT_ID=b.PROJECT_ID
		) a 
		<dynamic prepend="where ">
			<isNotEmpty prepend="and" property="projectId">
				 a.PROJECT_ID like CONCAT(#projectId_f#,'%') 
			</isNotEmpty>
			<isNotEmpty prepend="and" property="projectName">
				 a.PROJECT_NAME like CONCAT(#projectName#,'%') 
			</isNotEmpty>
			<isNotEmpty prepend="and" property="startDate">
				 a.START_DATE = #startDate# 
			</isNotEmpty>
			<isNotEmpty prepend="and" property="status">
				 a.STAT = #status# 
			</isNotEmpty>
		</dynamic>
		group by a.PROJECT_ID,a.ISS_ID,a.PROJECT_NAME,a.STAT
		order by min(a.START_DATE),a.STAT
	</select>
	<!-- zhengpy  20090212 end-->
	<select id="getNotWriteNoteStuff" parameterClass="string" resultClass="string">
		<![CDATA[
		select 
			USER_ID
		from ep_user 
		where exists(
			select * from ep_user_role a,ep_role b
			where a.ROLE_ID=b.ROLE_ID
			and b.ROLE_NAME='员工'
			and a.USER_ID=ep_user.USER_ID)
		and STAT='1' 
		and not exists(
			select * from TASK_LIST 
			where TASK_USER = ep_user.USER_ID
			and TASK_DATE=#value#
		)
		]]>
	</select>
	<select id="getBlankWork" parameterClass="blankWorkVO" resultClass="int">
		<![CDATA[
		select 
			count(distinct TASK_DATE)
		from TASK_LIST
		where TASK_DATE>=#sdate# 
			and TASK_DATE<=#edate# 
			and TASK_USER=#user# 
			group by TASK_USER
		]]>
	</select>
	
	<!-- 人员问题记录 -->
	<insert id="addIssueRecord" parameterClass="issueRecordVO">
		insert into issue_record (PROJECT_ID,STAT,USER_ID,MEMO,CHECK_USER)
		values (#projectId#,#status#,#userId#,#memo#,#checkUser#)
	</insert>
	<select id="getIssueRecord" parameterClass="issueRecordVO" resultMap="issueRecordMap">
		select * from issue_record
		where ID=#id#
	</select>

	<select id="getIssueRecordList" parameterClass="issueRecordVO" resultMap="issueRecordMap">
		select * from issue_record
		where PROJECT_ID=#projectId# and USER_ID=#userId# and STAT=#status#
	</select>	
	<update id="updateIssueRecord" parameterClass="issueRecordVO">
		update issue_record
		set MEMO=#memo#,CHECK_USER=#checkUser#
		where ID=#id#
	</update>
	<delete id="deleteIssueRecord" parameterClass="issueRecordVO">
		delete from issue_record where ID=#id#
	</delete>
	
	<!-- 需求变更历史 -->
	<insert id="insertRequireChange" parameterClass="requireChangeVO">
		insert into require_changes (PROJECT_ID,VERSION,CONTENT,REASON,USER_ID,CHANGE_DATE)
		values (#projectId#,#version#,#content#,#reason#,#userId#,#changeDate#)
	</insert>
	<select id="queryRequireChange" parameterClass="requireChangeVO" resultMap="requireChangeMap">
		select * from require_changes
		where PROJECT_ID=#projectId# and VERSION=#version#
	</select>	
	<select id="queryRequireChangeList" parameterClass="requireChangeVO" resultMap="requireChangeMap">
		select * from require_changes where PROJECT_ID=#projectId#
	</select>
	<update id="updateRequireChange" parameterClass="requireChangeVO">
		update require_changes
		set CONTENT=#content#,REASON=#reason#
		where PROJECT_ID=#projectId# and VERSION=#version#
	</update>
	<delete id="deleteRequireChange" parameterClass="requireChangeVO">
		delete from require_changes where PROJECT_ID=#projectId# and VERSION=#version#
	</delete>
	<select id="queryForNextRequireChangeVersion" parameterClass="string" resultClass="int">
		select IFNull(max(VERSION),0)+1 from require_changes where PROJECT_ID=#value#
	</select>
	<!-- 完成情况查询 -->
	<select id="getNotDoneWorks" resultClass="projectDistributeVO" parameterClass="projectDistributeForm">
		
		select 
			a.ID as id,
			a.PROJECT_ID as projectId,
			c.USER_NAME as userName,
			a.STAT as status,
			a.USER_ID as userid,
			a.START_DATE as startDate,
			a.END_DATE as endDate,
			a.MEMO as memo
		from project_distribute a,project_list b,ep_user c
		where a.IS_DONE='0'
			and a.PROJECT_ID=b.PROJECT_ID
			and b.STAT not in ('9','5')
			and a.STAT = b.STAT
			and a.USER_ID=c.USER_ID		
		<dynamic prepend="">
			<isNotEmpty prepend="and" property="endDate_f">
			<![CDATA[
				 a.END_DATE <= date_format(date_add(#endDate_f#,interval conv(#day#,10,10) day),'%Y%m%d') 
			]]>
			</isNotEmpty>
			<isNotEmpty prepend="and" property="project_f">
				 a.PROJECT_ID = #project_f# 
			</isNotEmpty>
			
		</dynamic>
		order by a.PROJECT_ID
	</select>
</sqlMap>
